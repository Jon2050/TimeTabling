import typing
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from Course import Course
from Lesson import Lesson
from Room import Room
from SemesterGroup import SemesterGroup
from Teacher import Teacher
from Timeslot import Timeslot, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY

WEEKDAYS = 5  # Dont change this constant without changing the timetable data!
TIMESLOTS_PER_DAY = 6  # Dont change this constant! It is based on the underlying timetable model.

DB_PATH = "TimeTableData.db"


def setAllLessonsAtSameTimeLists(lessons: typing.List[Lesson]):
    """
    Completes (redundant) information for the LessonAtSameTime constraint at all lessons.

    If two or more lessons should take place (start) on the same timeslot,
    this is given trough the lesson_at_same_time list on (only) one of these lessons.
    For the createLessonTimeAndRoomVariables function it is necessary that all of the lessons
    that should take place at the same timeslot have this list with the other lessons.

    F.e. this is the state after reading the timetable data from the database:
    lesson1.lessons_at_same_time = [lesson2, lesson3] but
    lesson2.lessons_at_same_time = [] and lesson3.lessons_at_same_time = [].

    So this function adds [lesson1, lesson3] to lesson2 lessons_at_same_time list and
    [lesson1, lesson2] to lesson3.
    """

    for lesson in lessons:
        for l in lesson.lessons_at_same_time:
            l.lessons_at_same_time = \
                [x for x in lesson.lessons_at_same_time if x is not l] + [lesson]  # create list with other same lessons for each other lesson


def setAllLessonsAvailableTimeslots(lessons, timeslots):
    """
    Sets the list of timeslots, generated by the getAvailableTimeslots function
    of each lesson, to the lesson as availableTimeslotsFiltered variable.

    Args:
        lessons: A list with all lessons.
        timeslots: A list with all timeslots.
    """
    for lesson in lessons:
        # set availableTimeslots list to each Lesson to make it available for other functions
        lesson.availableTimeslotsFiltered = lesson.getAvailableTimeslots(timeslots)


# Store all program data objects.
session = None
timeslots = None
teachers = None
rooms = None
courses = None
lessons = None
semesterGroups = None


def init():
    """
    Creates a connection to the sqlite database and loads the program data.
    Also calls the setAllLessonsAtSameTimeLists and setAllLessonsAvailableTimeslots
    functions for all lessons.
    """
    global session
    global timeslots
    global teachers
    global rooms
    global courses
    global lessons
    global semesterGroups

    engine = create_engine("sqlite:///" + DB_PATH + "?check_same_thread=False", echo=False)

    Session = sessionmaker()
    Session.configure(bind=engine)
    session = Session()

    timeslots = list(session.query(Timeslot).all())
    teachers = list(session.query(Teacher).all())
    rooms = list(session.query(Room).all())
    courses = list(session.query(Course).all())
    lessons = list(session.query(Lesson).all())
    semesterGroups = list(session.query(SemesterGroup).all())

    setAllLessonsAtSameTimeLists(lessons)

    setAllLessonsAvailableTimeslots(lessons, timeslots)


def getSession():
    """
    Returns: The SQLAlchemy Session object, connected with the sqlite database.
    """
    return session


def getTeachers():
    """
    Returns: A list of all Teacher objects.
    """
    return teachers


def getRooms():
    """
    Returns: A list of all Room objects.
    """
    return rooms


def getCourses():
    """
    Returns: A list of all Course objects.
    """
    return courses


def getLessons():
    """
    Returns: A list of all Lesson objects.
    """
    return lessons


def getSemesterGroups():
    """
    Returns: A list of all SemesterGroup objects.
    """
    return semesterGroups


def getTimeslots():
    """
    Returns: A list of all Timeslot objects.
    """
    return timeslots


def getLessonsAtSameTimeSets():
    """
    Returns: A list with all distinct sets of lessons, that take place at the same
    time, due to the LessonsAtSameTime constraint.
    """
    sameTimeSetList = []
    for lesson in getLessons():
        if lesson.lessons_at_same_time:
            if not any(lesson in sameTimeSet for sameTimeSet in sameTimeSetList):  # add only if not already in any of the sameTimeSets
                newSet = set()
                newSet.update([lesson] + lesson.lessons_at_same_time)
                sameTimeSetList.append(newSet)
    return sameTimeSetList


def getTimeslotsPerDay():
    """
    Returns: A list of lists, with the Timeslot objects of each weekday.
    """
    days = []
    day = list(filter(lambda t: t.weekday == MONDAY, getTimeslots()))
    if len(day) > 0:
        days.append(day)
    day = list(filter(lambda t: t.weekday == TUESDAY, getTimeslots()))
    if len(day) > 0:
        days.append(day)
    day = list(filter(lambda t: t.weekday == WEDNESDAY, getTimeslots()))
    if len(day) > 0:
        days.append(day)
    day = list(filter(lambda t: t.weekday == THURSDAY, getTimeslots()))
    if len(day) > 0:
        days.append(day)
    day = list(filter(lambda t: t.weekday == FRIDAY, getTimeslots()))
    if len(day) > 0:
        days.append(day)
    return days
